void sparseTrim(ArrayInfo& matrix) {
void sparseMultiplyScalar(ArrayInfo& matrix, double scalar) {
void setSparseValue(const std::string& name, const std::vector<int>& idx, const ArgsInfo& value) {
void evaluateMATExpression(const std::string& target, const std::string& expression) {
void executeLET(const std::string& line) {
void executePRINT(const std::string& line) {
void executeINPUT(const std::string &line) {
void executeGO(const std::string &line) {
void executeIF(const std::string &) { return "[IF stub]\n"; }
void executeFOR(const std::string &line) {
void executeDEF(const std::string &) {}
void executeDIM(const std::string &line) {
void executeMATPRINTFILE(const std::string& line) {
void executeREM(const std::string &) {}
void executeSTOP(const std::string &) { std::exit(0); }
void executeGOSUB(const std::string &line) {
void executeRETURN(const std::string &) {
void executeON(const std::string &line) {
void executeMAT(const std::string& line) {
void executeFORMAT(const std::string &) {
void executeBEEP(const std::string &) { std::cout << std::string("\a"); }
void executeOPEN(const std::string& line) {
void executeCLOSE(const std::string& line) {
void executePRINTFILE(const std::string& line) {
void executeINPUTFILE(const std::string& line) {
void executeWHILE(const std::string& line) {
void executeWEND(const std::string&) {
void executeREPEAT(const std::string&) {
void executeUNTIL(const std::string& line) {
void executeSEED(const std::string& line) {
void executePRINTFILEUSING(const std::string& line) {
void executeMAT(const std::string& line) {
void executeMATREAD(const std::string& line) {
void executeMATPRINT(const std::string& line) {
void executeMATPRINTFILE(const std::string& line) {
void evaluateMATExpression(const std::string& target, const std::string& expression) {
