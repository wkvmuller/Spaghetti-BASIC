--- include/program_structure.h
+++ include/program_structure.h
@@ struct MatrixValue {
   void configureStorage(const std::vector<int>& dims) {
     dimensions = dims;
     size_t total = 1;
     for (int d: dims) total *= d;
     if (total < DENSE_MATRIX_THRESHOLD) {
       isSparse = false;
       denseValues.resize(total);
     } else {
       isSparse = true;
       sparseValues.clear();
     }
   }
+
+  // Convert a linear index back to (row, col) based on dimensions
+  MatrixIndex unflattenIndex(size_t idx) const {
+    int cols = dimensions[1];
+    return {
+      static_cast<int>(idx / cols),
+      static_cast<int>(idx % cols)
+    };
+  }
