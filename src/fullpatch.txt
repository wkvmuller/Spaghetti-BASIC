from pathlib import Path

# Regenerate proper unified diff patches

program_structure_patch = """--- include/program_structure.h
+++ include/program_structure.h
@@ struct MatrixValue {
   void configureStorage(const std::vector<int>& dims) {
     dimensions = dims;
     size_t total = 1;
     for (int d: dims) total *= d;
     if (total < DENSE_MATRIX_THRESHOLD) {
       isSparse = false;
       denseValues.resize(total);
     } else {
       isSparse = true;
       sparseValues.clear();
     }
   }
+
+  // Convert a linear index back to (row, col) based on dimensions
+  MatrixIndex unflattenIndex(size_t idx) const {
+    int cols = dimensions[1];
+    return {
+      static_cast<int>(idx / cols),
+      static_cast<int>(idx % cols)
+    };
+  }
"""

matrixops_patch = """--- src/matrixops.cpp
+++ src/matrixops.cpp
@@
-extern static std::map<int, std::string>::const_iterator findLine(int ln);
+static std::map<int, std::string>::const_iterator findLine(int ln);
@@
-MatrixValue matScalarOp(const MatrixValue& A, double scalar, char op, bool scalarLeft = false) {
+MatrixValue matScalarOp(const MatrixValue& A, double scalar, char op, bool scalarLeft) {
@@ void executeDIM(const std::string &line) {
-    size_t totalElements = rows * cols;
-    mat.configureStorage(totalElements);
+    std::vector<int> dims = { rows, cols };
+    mat.configureStorage(dims);
@@ MatrixValue matElementWiseOp(const MatrixValue &A, const MatrixValue &B, char op) {
-    R.configureStorage(total);
+    R.dimensions = A.dimensions;
+    R.configureStorage(R.dimensions);
@@ for (size_t idx = 0; idx < total; ++idx) {
-        double a = A.isSparse ? program.getMatrixValue(A, idx) : A.denseValues[idx].numericValue;
-        double b = B.isSparse ? program.getMatrixValue(B, idx) : B.denseValues[idx].numericValue;
+        MatrixIndex mi = A.unflattenIndex(idx);
+        VarInfo va = A.get(mi);
+        VarInfo vb = B.get(mi);
+        double a = va.numericValue;
+        double b = vb.numericValue;
@@ dispatch section
-        program.matrices[X] = executeMATOperation(opcode, program.matrices[A], program.matrices[B]);
+        program.matrices[X] = executeMATOperation(line);
"""

# Write patches
ps_path = Path("/mnt/data/program_structure.patch")
mp_path = Path("/mnt/data/matrixops.patch")
ps_path.write_text(program_structure_patch)
mp_path.write_text(matrixops_patch)

ps_path.name, mp_path.name
